<div id="query-report">

  <date-quick-links></date-quick-links>

  <div id="query-params" class="ui form">
    <div class="fields">
      <div class="two wide field">
        <label for="from_date">From Date</label>
        <date-picker
          id="from_date" name="from_date"
          data-value="<%= @report_params.date_range.start_date.strftime('%Y-%m-%d') %>"
          v-on:date-changed="fromDateChanged"
          />
      </div>
      <div class="two wide field">
        <label for="to_date">To Date</label>
        <date-picker
          id="to_date" name="to_date"
          data-value="<%= @report_params.date_range.end_date.strftime('%Y-%m-%d') %>"
          v-model="toDate"/>
      </div>
    </div>
    <div class="field">
      <button class="ui labeled icon button" type="submit" id="query-submit" name="query-submit" @click="loadChart">
        <i class="play icon"></i>
        Run
      </button>
      <button class="ui toggle icon button" v-bind:class="{ active: showHelp }" @click="showHelp = !showHelp">
        <i class="question icon"></i>
      </button>
    </div>
    <div class="field">
      <textarea id="query-editor"><%= @query %></textarea>
    </div>
  </div>

  <div class="ui segment" v-if="showHelp">
    <%= render partial: 'partials/query_help' %>
  </div>

  <div v-show="chartData">
    <div id="query-results">

    </div>
    <p style="text-align: right;"><a id="download" v-bind:href="downloadUrl">Download</a></p>
  </div>

  <div v-show="loading" style="margin: 100px 0;">
    <div class="ui active centered inline loader"></div>
  </div>

  <div id="query-error" class="ui negative message" v-if="errorData">
    <div class="header">{{ errorData.message }}</div>
    <div class="details" style="overflow-x: auto;"><pre>{{ errorData.details }}</pre></div>
  </div>

</div>

<script>
  var eventHub = new Vue();

  Vue.component('date-picker', {
    props: ['id', 'name', 'value'],
    mounted: function() {
      $(this.$el).pickadate({
        selectMonths: true, // Creates a dropdown to control month
        selectYears: 15, // Creates a dropdown of 15 years to control year,
        today: 'Today',
        clear: 'Clear',
        close: 'Ok',
        formatSubmit: 'yyyy-mm-dd',
        hiddenName: true,
        max: true,
        container: '#pickadate-container',
        onClose : function()
        {
          this.$holder.blur();
        },
        onSet: (context) => this.$emit('date-changed', moment(context.select).format('YYYY-MM-DD'))
      });
    },
    template: `<%= render partial: 'partials/templates/date-picker' %>`
  });

  Vue.component('date-quick-links', {
      data: function() {
          return {
              monthPeriodOptions: [],
              relativePeriodOptions: [],
              timesheetPeriodOptions: [],
              selectedMonthPeriod: null,
              selectedRelativePeriod: null,
              selectedTimesheetPeriod: null
          };
      },
      mounted: function() {
        $(this.$el).find('.dropdown').dropdown({on: 'hover'});
        $.get('/metrics/api/boards/754/time_period_options.json', this.initializeTimePeriods);
      },
      methods: {
          initializeTimePeriods: function (response) {
              this.monthPeriodOptions = response.month_periods
              this.selectedMonthPeriod = response.selected_month_period
              this.relativePeriodOptions = response.relative_periods
              this.selectedRelativePeriod = response.selected_relative_period
              this.timesheetPeriodOptions = response.timesheet_periods
              this.selectedTimesheetPeriod = response.selected_timesheet_period
          },
        updateTimePeriod: function($event) {
            //alert(this.selectedMonthPeriod.start_date);
        }
      },
    watch: {
        selectedMonthPeriod: function() {
          eventHub.$emit('date-range-changed', this.monthPeriodOptions[this.selectedMonthPeriod]);
        }
    },
    template: `<%= render partial: 'partials/templates/date-quick-links' %>`
  });

  var app = new Vue({
    el: '#query-report',
    data: {
      chartData: null,
      errorData: null,
      chartBaseUrl: '<%= chart_url %>',
      downloadBaseUrl: '<%= download_url %>',
      query: null,
      errorHeader: '',
      errorDetails: '',
      loading: false,
      showHelp: false,
      editor: null,
      fromDate: '<%= @report_params.date_range.start_date.strftime('%Y-%m-%d') %>',
      toDate: '<%= @report_params.date_range.end_date.strftime('%Y-%m-%d') %>'
    },
    methods: {
      loadChart: function () {
        this.chartData = null;
        this.errorData = null;
        this.loading = true;
        $.get(this.url, this.drawChart)
            .fail(this.onError);
      },
      drawChart: function (response) {
        this.loading = false;

        this.chartData = new google.visualization.DataTable(response.data);
        var chartOpts = response.chartOpts;

        this.chart = new google.visualization.<%= chart_type %>(document.getElementById('query-results'));
        google.visualization.events.addListener(this.chart, 'ready', this.onReady);
        this.$nextTick(function() {
          this.chart.draw(this.chartData, chartOpts);
        });
      },
      onReady: function() {
        var $table = $(document).find('.google-visualization-table table');
        $table.addClass('ui very compact table');
      },
      onError: function(response) {
        this.loading = false;
        if (response.status == 400) {
          this.errorData = response.responseJSON;
        }
      },
      dateRangeChanged: function(option) {
        this.fromDate = option.start_date;
      },
      fromDateChanged: function(date) {
        this.fromDate = date;
      },
      toDateChanged: function(date) {
        this.toDate = date;
      },
      chartLoaded: function() {
        // trigger initial load
        this.query = this.editor.getValue();
      },
      editorChanged: function() {
        this.query = this.editor.getValue();
      }
    },
    mounted: function() {
      this.editor = CodeMirror.fromTextArea(document.getElementById('query-editor'), {
        lineNumbers: true,
        mode: 'sql',
        readOnly: false
      });
      this.editor.on('change', this.editorChanged);
      google.charts.setOnLoadCallback(this.chartLoaded);
    },
    created: function() {
      eventHub.$on('date-range-changed', this.dateRangeChanged);
    },
    beforeDestroy: function() {
      eventHub.$off('date-range-changed', this.dateRangeChanged);
    },
    computed: {
      url: function() {
        return `${this.chartBaseUrl}?${this.queryParams}`;
      },
      downloadUrl: function() {
        return `${this.downloadBaseUrl}?${this.queryParams}`;
      },
      queryParams: function() {
        return `query=${encodeURI(this.query)}&from_date=${this.fromDate}&to_date=${this.toDate}`;
      }
    },
    watch: {
      queryParams: function(params) {
        this.loadChart();
      }
    }
  })
</script>
