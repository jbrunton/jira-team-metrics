<% breadcrumb :report, @board, :query, 'Custom Query' %>
<% content_for :title, "Custom Query - #{@board.name}" %>

<h1>Query Data</h1>

<div id="query-report">
  <div id="query-params" class="ui form">
    <div class="fields">
      <div class="sixteen wide field">
        <label>Query <a id="query-help"><i class="question circle outline icon"></i></a>
          <div class="ui fluid popup">
            <%= render partial: 'partials/query_help' %>
          </div>
        </label>
        <div class="ui action input">
          <input type="text" class="mono" id="query" name="query" v-model="query" />
          <button class="ui button" type="submit" id="query-submit" name="query-submit" @click="loadChart">Search</button>
        </div>
      </div>
    </div>
  </div>

  <div v-show="chartData">
    <div id="query-results">

    </div>
    <p style="text-align: right;"><a id="download" v-bind:href="downloadUrl">Download</a></p>
  </div>

  <div v-show="loading" style="margin: 100px 0;">
    <div class="ui active centered inline loader"></div>
  </div>

  <div id="query-error" class="ui negative message" v-if="errorData">
    <div class="header">{{ errorData.message }}</div>
    <div class="details" style="overflow-x: auto;"><pre>{{ errorData.details }}</pre></div>
  </div>

</div>

<script>
  var app = new Vue({
    el: '#query-report',
    data: {
      chartData: null,
      errorData: null,
      query: "<%= (@report_params.query || @default_query).html_safe %>",
      errorHeader: '',
      errorDetails: '',
      loading: false
    },
    methods: {
      loadChart: function () {
        this.chartData = null;
        this.errorData = null;
        this.loading = true;
        $.get(this.url, this.drawChart)
            .fail(this.onError);
      },
      drawChart: function (response) {
        this.loading = false;
        this.chartData = new google.visualization.DataTable(response.data);
        this.chartOpts = response.chartOpts;
        this.chart = new google.visualization.Table(document.getElementById('query-results'));
        google.visualization.events.addListener(this.chart, 'ready', this.onReady);
        this.chart.draw(this.chartData, this.chartOpts);
      },
      onReady: function() {
        var $table = $(document).find('.google-visualization-table table');
        $table.addClass('ui very compact table');
      },
      onError: function(response) {
        this.loading = false;
        if (response.status == 400) {
          this.errorData = response.responseJSON;
        }
      }
    },
    mounted: function() {
      this.loadChart();
    },
    computed: {
      url: function() {
        return `/metrics/api/boards/754/query.json?query=${this.query}`;
      },
      downloadUrl: function() {
        return `/metrics/api/boards/754/query.csv?query=${this.query}`;
      }
    }
  })
</script>
